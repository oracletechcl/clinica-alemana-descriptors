# NGINX Ingress Controller Configuration for OCI/OKE
# Based on official NGINX Ingress Controller Helm chart

# ============================================================================
# CONFIGURATION SECTION - All customizable values
# ============================================================================

# Basic Configuration
config:
  chart_name: "nginx-ingress"
  chart_version: "4.11.3"
  chart_repo: "https://kubernetes.github.io/ingress-nginx"
  namespace: "nginx-ingress"

# OCI Load Balancer Configuration
loadbalancer:
  shape: "flexible"
  shape_min: "10"
  shape_max: "100"

# NGINX Controller Configuration
nginx:
  replica_count: 2
  enable_metrics: true
  set_as_default: false
  
# Image Configuration
image:
  registry: "registry.k8s.io/ingress-nginx"
  controller_tag: "v1.11.3"

# Resource Configuration
resources:
  limits:
    cpu: "500m"
    memory: "512Mi"
  requests:
    cpu: "100m"
    memory: "128Mi"

# ============================================================================
# HELM VALUES CONFIGURATION
# ============================================================================

controller:
  # Basic configuration
  name: controller
  kind: Deployment
  
  # Resource configuration optimized for OKE
  replicaCount: 2
  
  # Image configuration
  image:
    repository: registry.k8s.io/ingress-nginx/controller
    tag: "v1.11.3"
    pullPolicy: IfNotPresent
  
  # IngressClass configuration
  ingressClassResource:
    name: nginx
    enabled: true
    default: false
    controllerValue: "k8s.io/ingress-nginx"
  
  # Service configuration with OCI optimizations
  service:
    create: true
    type: LoadBalancer
    externalTrafficPolicy: Local
    annotations:
      # OCI Load Balancer bandwidth annotations for optimal performance
      oci.oraclecloud.com/load-balancer-type: "lb"
      service.beta.kubernetes.io/oci-load-balancer-shape: "flexible"
      service.beta.kubernetes.io/oci-load-balancer-shape-flex-min: "10"
      service.beta.kubernetes.io/oci-load-balancer-shape-flex-max: "100"
      # Performance optimization annotations
      service.beta.kubernetes.io/oci-load-balancer-connection-idle-timeout: "300"
      service.beta.kubernetes.io/oci-load-balancer-backend-protocol: "HTTP"
    ports:
      http: 80
      https: 443
  
  # Resource limits and requests
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi
  
  # Security context
  securityContext:
    allowPrivilegeEscalation: false
    runAsUser: 101
    runAsNonRoot: true
    capabilities:
      drop:
      - ALL
      add:
      - NET_BIND_SERVICE
  
  # Pod configuration
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "10254"
    prometheus.io/path: "/metrics"
  
  # Autoscaling configuration
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
  
  # Node selection and scheduling
  nodeSelector: {}
  
  # Tolerations for preemptible nodes
  tolerations:
    - key: "oci.oraclecloud.com/instance-type"
      operator: "Equal"
      value: "preemptible"
      effect: "NoSchedule"
  
  # Anti-affinity for better distribution
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: app.kubernetes.io/name
              operator: In
              values:
              - ingress-nginx
          topologyKey: kubernetes.io/hostname
  
  # NGINX configuration
  config:
    # Performance optimizations
    worker-processes: "auto"
    worker-connections: "10240"
    worker-rlimit-nofile: "20480"
    # Keep-alive optimizations
    keepalive-timeout: "75"
    keepalive-requests: "100"
    # Upstream optimizations
    upstream-keepalive-connections: "32"
    upstream-keepalive-timeout: "60"
    # Buffer optimizations
    proxy-buffer-size: "16k"
    proxy-buffers-number: "8"
    # Logging
    log-format-main: '$remote_addr - $remote_user [$time_local] "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" "$http_x_forwarded_for" req_time=$request_time'
    access-log-path: "/var/log/nginx/access.log"
    error-log-path: "/var/log/nginx/error.log"
  
  # Health and readiness checks
  livenessProbe:
    httpGet:
      path: /healthz
      port: 10254
      scheme: HTTP
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 1
    successThreshold: 1
    failureThreshold: 5
  
  readinessProbe:
    httpGet:
      path: /healthz
      port: 10254
      scheme: HTTP
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 1
    successThreshold: 1
    failureThreshold: 3
  
  # Enable metrics
  metrics:
    enabled: true
    service:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "10254"
    serviceMonitor:
      enabled: false

# RBAC configuration
rbac:
  create: true

# Service Account
serviceAccount:
  create: true
  name: ""
  annotations: {}

# Default backend (optional)
defaultBackend:
  enabled: false
